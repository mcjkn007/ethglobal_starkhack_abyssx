using System.Reflection;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using cfg.item;
using Codice.CM.Common.Purge;
using Codice.CM.WorkspaceServer.Lock;
using UnityEngine;
using UnityEditor;
using UnityEngine.EventSystems;

namespace Abyss
{
    public class CardActionGenerator
    {
        private static string s_pattern =
            @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;        
using UnityEngine.UI;
using System;
using DG.Tweening;
using GameCore.CustomComponent.Role;

namespace Abyss.GameActions
{{
    /// <summary>
    /// {0}
    /// </summary>
    [CardAction({1})]
    public class Action_{2} : BaseGameAction
    {{
        public override void Execute(BaseRole self, object targets, int value, DG.Tweening.Sequence sequence)
        {{
            //TODO  
        }}
    }}
}}        
";
        private static string s_csOutputPath = System.IO.Path.Combine(Application.dataPath, "GameCore", "CustomComponent", "CardAction", "GeneratedActions");
        
        [MenuItem("工具/Action/根据配置表增量生成GameAction")]
        public static void GenerateActionPath()
        {
            if (!Directory.Exists(s_csOutputPath))
            {
                return;
            }
        
            ///用于记录新增了多少个action脚本
            int counter = 0;
            StringBuilder recorder = new StringBuilder();
            var luban = GameObject.FindObjectOfType<LubanComponent>() as LubanComponent;
            luban.LoadTable();
            var actionPool = luban.Tables.TbGameActions;
            foreach (var action in actionPool.DataList)
            {
                
                var scriptPath = Path.Combine(s_csOutputPath, $"Action_{action.Name}.cs");
                if (File.Exists(scriptPath))
                {
                    continue;
                }
                using (System.IO.FileStream file = File.Create(scriptPath))
                {
                    var scriptContent = string.Format(s_pattern, action.Comment, action.Id, action.Name);
                    file.Write(System.Text.Encoding.UTF8.GetBytes(scriptContent));
                    recorder.AppendLine($"生成Action_{action.Name}");
                    counter++;
                }
                
            }
            AssetDatabase.Refresh();
            Debug.Log($"成功新增数据{counter}条，分别是:");
            Debug.Log(recorder);
            Debug.Log("===== success =====");
        }
    }
}