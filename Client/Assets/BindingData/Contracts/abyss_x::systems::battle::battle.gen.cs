// Generated by dojo-bindgen on Fri, 21 Jun 2024 11:07:27 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;

// System definitions for `abyss_x::systems::battle::battle` contract
public class Battle : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `dojo_init` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> dojo_init(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_init",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `start_game` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> start_game(Account account, uint game_mode, byte role_category) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(game_mode).Inner);
		calldata.Add(new FieldElement(role_category).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "start_game",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `giveup_game` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> giveup_game(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "giveup_game",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `select_road` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> select_road(Account account, byte value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "select_road",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `check_e1_battle_result` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> check_e1_battle_result(Account account, ushort[] opts, byte value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(opts.Length).Inner);
		calldata.AddRange(opts.SelectMany(optsItem => new [] { new FieldElement(optsItem).Inner }));
		calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "check_e1_battle_result",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `check_e2_battle_result` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> check_e2_battle_result(Account account, ushort[] opts, byte value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(opts.Length).Inner);
		calldata.AddRange(opts.SelectMany(optsItem => new [] { new FieldElement(optsItem).Inner }));
		calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "check_e2_battle_result",
                calldata = calldata.ToArray()
            }
        });
    }
            
}
        