using System.Reflection;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using UnityEngine;
using UnityEditor;
using UnityEngine.EventSystems;

namespace Abyss
{
    public class CardBuffGenerator
    {
        private static string s_enumPattern =
            @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;        
using UnityEngine.UI;
using System;

namespace Abyss.Stat
{{
    /// <summary>
    /// 所有buff所生成的对应ID
    /// </summary>  
    public enum EnumGameBuff
    {{
        {0}
    }}
    
}}
";
        private static string s_pattern =
            @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;        
using UnityEngine.UI;
using System;
using DG.Tweening;
using GameCore.Stats;
using GameCore.CustomComponent.Role;
using GameCore;

namespace Abyss.Stat
{{
    /// <summary>
    /// {0}
    /// </summary>
    [GameBuff({1})]
    public class Buff_{2} : BaseGameBuff
    {{
        public override void OnRoundStart()
        {{
            base.OnRoundStart();

        }}
        
        public override void OnRoundEnd()
        {{
            base.OnRoundEnd();

        }}

        public override void OnApply()
        {{
            base.OnApply();

        }}
        public override void Calculate(ref int originalValue)
        {{

        }}

        public Buff_{2}(BaseRole owner, GameBuffView view) : base(owner, view)
        {{
            this.cfg = Entry.Luban.Tables.TbGameBuff.DataMap[{1}];
        }}
    }}
}}        
";
        private static string s_csOutputPath = System.IO.Path.Combine(Application.dataPath, "GameCore", "Stats", "GeneratedBuffs");
        
        [MenuItem("工具/Buff/根据配置表增量生成GameBuff")]
        public static void GenerateActionPath()
        {
            var luban = GameObject.FindObjectOfType<LubanComponent>() as LubanComponent;
            GenerateGameBuffs(luban);
            GenerateGameBuffEnums(luban);
            AssetDatabase.Refresh();

        }
        /// <summary>
        /// 自动生成Enum脚本
        /// </summary>
    private static void GenerateGameBuffEnums(LubanComponent luban)
    {
        int counter = 0;
        StringBuilder recorder = new StringBuilder();       
        var scriptPath = Path.Combine(s_csOutputPath, $"EnumGameBuff.cs");

        foreach (var buff in luban.Tables.TbGameBuff.DataList)
        {
            recorder.AppendLine($"{buff.Alias} = {buff.Id},");
            counter++;
        }

        using FileStream fs = new FileStream(scriptPath,FileMode.OpenOrCreate);
        fs.Write(Encoding.UTF8.GetBytes(string.Format(s_enumPattern, recorder)));
        Debug.Log($"EnumGameBuff成功新增数据{counter}条，分别是:");
        Debug.Log(recorder);
        Debug.Log("===== Enum success =====");
    }

    private static void GenerateGameBuffs(LubanComponent luban)
        {
            if (!Directory.Exists(s_csOutputPath))
            {
                return;
            }
        
            ///用于记录新增了多少个action脚本
            int counter = 0;
            StringBuilder recorder = new StringBuilder();
            luban.LoadTable();
            var buffPool = luban.Tables.TbGameBuff;
            foreach (var buff in buffPool.DataList)
            {
                
                var scriptPath = Path.Combine(s_csOutputPath, $"Buff_{buff.Alias}.cs");
                if (File.Exists(scriptPath))
                {
                    continue;
                }
                using (System.IO.FileStream file = File.Create(scriptPath))
                {
                    try
                    {
                        var scriptContent = string.Format(s_pattern ,buff.Desc , buff.Id, buff.Alias);
                        file.Write(System.Text.Encoding.UTF8.GetBytes(scriptContent));
                        recorder.AppendLine($"生成Action_{buff}");
                        counter++;
                    }
                    catch (Exception e)
                    {
                        Debug.LogError(e);
                        Debug.LogError(buff);
                        throw;
                    }

                }
                
            }
            Debug.Log($"GameBuff成功新增数据{counter}条，分别是:");
            Debug.Log(recorder);
            Debug.Log("===== success =====");
        }
    }
}